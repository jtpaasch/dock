#!/usr/bin/env bash
#
# DOCK
# Manage docker images and containers on a Vagrant VM.
#
# Author JT Paasch
# License MIT <http://opensource.org/licenses/MIT>
# 

# What's the name of this program?
PROGRAM_NAME=`basename $BASH_SOURCE`

# Where are default config files kept?
CONFIG=$HOME/.dock.d

# Where is the vagrant box kept?
BOX=$HOME/.dock.d

# A function to display help/usage.
function usage {
    echo "-- DOCK --"
    echo "Run docker on a Vagrant VM."
    echo ""
    echo "USAGE:"
    echo "  $PROGRAM_NAME [options] <command>"
    echo ""
    echo "COMMANDS:"
    echo "  start      Boots the VM."
    echo "  stop       Shuts down the VM."
    echo "  provision  Provision the VM."
    echo "  ssh        SSH into the VM."
    echo "  destroy    Destroys the VM."
    echo ""
    echo "OPTIONS:"
    echo "  -h --help  Display help."
    echo "  --ip       The VM's private IP. Defaults to: 192.168.0.222."
    echo "  --box      The Vagrant box to run. Defaults to: ubuntu/trusty64"
    echo '  --share    <host-path>:<vm-path>. Defaults to: $HOME:$HOME'
}

# A function to display how to get help.
function helphint {
    echo "See: $PROGRAM_NAME --help"
}

# A function that checks if the folder is initialized for the VM.
# If not, it prints a message and exits.
function stop_if_not_init {
    if [ ! -f $BOX/Vagrantfile ]; then
        echo "The VM is not properly initialized."
        echo "Try running the install script again."
        exit 1
    fi
}

# A function to boot the VM.
function up {

    # Don't proceed if the folder hasn't been initialized for the VM.
    stop_if_not_init

    # Move into the vagrant folder.
    ORIGINAL_PWD=`pwd`
    cd $BOX

    # If a box was specified, try to put that into the Vagrantfile.
    if [ $BOX_IDENTIFIER ]; then

        # Escape backslashes so it can go in the sed regex.
        SAFE_BOX_ID=${BOX_IDENTIFIER/\//\\\/}

        # Use sed to replace the box identifier.
        sed -i.bak \
            's/vm\.box = "\([^"]*\)"/vm\.box = "'$SAFE_BOX_ID'"/' \
            Vagrantfile

        # If it worked, remove the backup. Otherwise, restore the original.
        if [[ "$?" == "0" ]]; then
            rm Vagrantfile.bak
        else
            echo "Couldn't modify Vagrantfile with $BOX_IDENTIFIER."
            mv $BOX/Vagrantfile.bak $BOK/Vagrantfile
            exit 1
        fi

    fi

    # If an IP was specified, try to put that into the Vagrantfile.
    if [ $BOX_IP_ADDRESS ]; then

        # Use sed to replace the IP address.
        sed -i.bak \
            's/, ip: "\([^"]*\)"/, ip: "'$BOX_IP_ADDRESS'"/' \
            Vagrantfile

        # If it worked, remove the backup. Otherwise, restore the original.
        if [[ "$?" == "0" ]]; then
            rm Vagrantfile.bak
        else
            echo "Couldn't modify Vagrantfile with $BOX_IP_ADDRESS."
            mv $BOX/Vagrantfile.bak $BOK/Vagrantfile
            exit 1
        fi

    fi

    # If a share folder was specified, try to put it in the Vagrantfile.
    if [ $SHARE ]; then

        # The $SHARE option comes in the form <host_path>:<vm_path>.
        # We need to split on the colon to get the host and vm paths.
        IFS=':' read HOST_PATH VM_PATH <<< "$SHARE"
        if [[ -z $HOST_PATH ]] || [[ -z $VM_PATH ]]; then
            echo "Incorrect shared folder format."
            helphint
            exit 1
        fi

        # Escape backslashes in paths so they can go in the sed regex.
        ESCAPED_HOST_PATH=${HOST_PATH//\//\\\/}
        ESCAPED_VM_PATH=${VM_PATH//\//\\\/}

        # Use sed to replace the box identifier.
        MATCH='_folder "\([^"]*\)", "\([^"]*\)"'
        REPLACE='_folder "'${ESCAPED_HOST_PATH}'", "'${ESCAPED_VM_PATH}'"'
        SUBSTITUTION='s/'${MATCH}'/'${REPLACE}'/'
        sed -i.bak \
            "${SUBSTITUTION}" \
            Vagrantfile

        # If it worked, remove the backup. Otherwise, restore the original.
        if [[ "$?" == "0" ]]; then
            rm Vagrantfile.bak
        else
            echo "Couldn't modify Vagrantfile with $SHARE."
            mv $BOX/Vagrantfile.bak $BOK/Vagrantfile
            exit 1
        fi

    fi

    # Now boot the VM.
    vagrant up

    # Back out of the vagrant folder and go back to the previous pwd.
    cd $ORIGINAL_PWD

}

# A function to shut the VM down.
function down {
    stop_if_not_init
    ORIGINAL_PWD=`pwd`
    cd $BOX
    vagrant halt
    cd $ORIGINAL_PWD
}

# A function to re-provision the VM.
function provision {
    stop_if_not_init
    ORIGINAL_PWD=`pwd`
    cd $BOX
    vagrant provision
    cd $ORIGINAL_PWD
}

# A function to destroy the VM.
function destroy {
    stop_if_not_init
    ORIGINAL_PWD=`pwd`
    cd $BOX
    vagrant destroy
    cd $ORIGINAL_PWD
}

# A function to SSH into the VM.
function ssh_into_vm {
    stop_if_not_init
    ORIGINAL_PWD=`pwd`
    cd $BOX
    vagrant ssh
    cd $ORIGINAL_PWD
}

# A function to pass a command to the VM.
function pass_command_to_vm {
    stop_if_not_init
    ORIGINAL_PWD=`pwd`
    cd $BOX
    CMD_STRING="${COMMAND[@]}"
    vagrant ssh -c "${CMD_STRING}"
    cd $ORIGINAL_PWD
}

# A function to get the status of the VM.
function status {
    stop_if_not_init
    ORIGINAL_PWD=`pwd`
    cd $BOX
    vagrant status | grep -o "default\s*[a-z]*" | grep -o "[a-z]*$"
    cd $ORIGINAL_PWD
}

# If no arguments were provided, say so. We can't continue.
if [[ "$#" == "0" ]]; then
    echo "No arguments were provided."
    helphint
    exit 1
fi

# Step through the arguments, one by one.
while (( "$#" )); do

    # What's the value of the current argument in the chain ($1)?
    case $1 in

        # The help option.
        -h|--help)    usage
                      exit 1
                      ;;

        # An IP option, e.g. --ip 192.168.0.20
        --ip)         if [[ -z $BOX_IP_ADDRESS ]]; then
                          shift
                          BOX_IP_ADDRESS=$1
                      else
                          echo "Specify --ip only once."
                          helphint
                          exit 1
                      fi
                      ;;

        # A --box option, e.g. --box ubuntu/vivid64
        --box)        if [[ -z $BOX_IDENTIFIER ]]; then
                          shift
                          BOX_IDENTIFIER=$1
                      else
                          echo "Specify --box only once."
                          helphint
                          exit 1
                      fi
                      ;;

        # A --share option, e.g. --share .:/usr/share
        --share)      if [[ -z $SHARE ]]; then
                          shift
                          SHARE=$1
                      else
                          echo "Specify --share only once."
                          helphint
                          exit 1
                      fi
                      ;;

        # Boot the VM.
        start)        if [[ -z $VAGRANT_COMMAND ]]; then
                          VAGRANT_COMMAND=up
                      else
                          echo "Specify 'start' only once."
                          helphint
                          exit 1
                      fi
                      ;;

        # Shut down the VM.
        stop)         if [[ -z $VAGRANT_COMMAND ]]; then
                          VAGRANT_COMMAND=down
                      else
                          echo "Specify 'stop' only once."
                          helphint
                          exit 1
                      fi
                      ;;

        # Provision the VM.
        provision)    if [[ -z $VAGRANT_COMMAND ]]; then
                          VAGRANT_COMMAND=provision
                      else
                          echo "Specify 'provision' only once."
                          helphint
                          exit 1
                      fi
                      ;;

        # Destroy the VM.
        destroy)      if [[ -z $VAGRANT_COMMAND ]]; then
                          VAGRANT_COMMAND=destroy
                      else
                          echo "Specify 'destroy' only once."
                          helphint
                          exit 1
                      fi
                      ;;

        # SSH into the VM.
        ssh)          if [[ -z $VAGRANT_COMMAND ]]; then
                          VAGRANT_COMMAND=ssh_into_vm
                      else
                          echo "Specify 'ssh' only once."
                          helphint
                          exit 1
                      fi
                      ;;

        # Get the VM's status.
        status)       if [[ -z $VAGRANT_COMMAND ]]; then
                          VAGRANT_COMMAND=status
                      else
                          echo "Specify 'status' only once."
                          helphint
                          exit 1
                      fi
                      ;;

        # Capture the whole docker command.
        docker)       DOCKER_COMMAND="$@"
                      break
                      ;;

        # Unrecognized options.
        -*|--*)       echo "Unrecognized option: $1"
                      helphint
                      exit 1
                      ;;

        # Unrecognized commands.
        *)            echo "Unrecognized command: $1"
                      helphint
                      exit 1
                      ;;

    esac

    # Shift $1 to the next argument.
    shift

done

# If a vagrant command was specified, execute it.
if [ $VAGRANT_COMMAND ]; then
    $VAGRANT_COMMAND

# If we have a docker command, pass it on to the VM.
elif [ "${DOCKER_COMMAND[@]}" ]; then
    COMMAND=$DOCKER_COMMAND
    pass_command_to_vm
fi

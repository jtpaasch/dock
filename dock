#!/usr/bin/env bash
#
# DOCK
# Manage docker images and containers on a Vagrant VM.
#
# Author JT Paasch
# License MIT <http://opensource.org/licenses/MIT>
# 

# What's the name of this program?
PROGRAM_NAME=`basename $BASH_SOURCE`

# Where are default config files kept?
CONFIG=$HOME/.dock.d/config

# Where is the vagrant box kept?
BOX=.box

# A function to display help/usage.
function usage {
    echo "-- DOCK --"
    echo "Manage docker images and containers on a Vagrant VM."
    echo ""
    echo "USAGE:"
    echo "  $PROGRAM_NAME [options] <command> [arg1] [arg2] [...] [argn] "
    echo ""
    echo "COMMANDS:"
    echo "  init       Initializes the VM."
    echo "  up         Boots the VM. It gets created if it doesn't exist."
    echo "  down       Shuts down the VM."
    echo "  provision  Provision the VM."
    echo "  ssh        SSH into the VM."
    echo "  destroy    Destroys the VM."
    echo ""
    echo "OPTIONS:"
    echo "  -h --help        Display help."
    echo "  --ip             VM's Private IP. Default: 192.168.0.222."
    echo "  --box            Vagrant box. Default: ubuntu/trusty64"
    echo "  --synced-folder  On the VM. Default: /usr/local/workdir"
}

# A function to display how to get help.
function helphint {
    echo "See: $PROGRAM_NAME --help"
}

# A function that checks if the folder is initialized for the VM.
# If not, it prints a message and exits.
function stop_if_not_init {
    # TODO: Walk up the directory tree to find a $BOX folder,
    # and then set $BOX to that.
    if [ ! -f $BOX/Vagrantfile ]; then
        echo "The VM is not initialized."
        echo "Try: $PROGRAM_NAME init"
        exit 1
    fi
}

# A function to initialize the VM.
function init {

    # If a vagrant folder already exists, exit.
    if [ -d $BOX ]; then
        echo "Already initialized."
        echo "Delete $BOX and try again, or run: $PROGRAM_NAME up"
        exit 1
    fi

    # Otherwise, create a vagrant folder.
    mkdir $BOX

    # Move into the vagrant folder.
    ORIGINAL_PWD=`pwd`
    cd $BOX

    # Copy the Vagrantfile over.
    cp $CONFIG/Vagrantfile .

    # Back out of the vagrant folder and go back to the previous pwd.
    cd $ORIGINAL_PWD

}

# A function to boot the VM.
function up {

    # Don't proceed if the folder hasn't been initialized for the VM.
    stop_if_not_init

    # Move into the vagrant folder.
    ORIGINAL_PWD=`pwd`
    cd $BOX

    # If a box was specified, try to put that into the Vagrantfile.
    if [ $BOX_IDENTIFIER ]; then

        # Escape backslashes so it can go in the sed regex.
        SAFE_BOX_ID=${BOX_IDENTIFIER/\//\\\/}

        # Use sed to replace the box identifier.
        sed -i.bak \
            's/vm\.box = "\([^"]*\)"/vm\.box = "'$SAFE_BOX_ID'"/' \
            Vagrantfile

        # If it worked, remove the backup file. Otherwise, replace it.
        if [[ "$?" == "0" ]]; then
            rm Vagrantfile.bak
        else
            echo "Couldn't modify Vagrantfile with $BOX_IDENTIFIER."
            mv $BOX/Vagrantfile.bak $BOK/Vagrantfile
            exit 1
        fi

    fi

    # If an IP was specified, try to put that into the Vagrantfile.
    if [ $BOX_IP_ADDRESS ]; then

        # Use sed to replace the IP address.
        sed -i.bak \
            's/, ip: "\([^"]*\)"/, ip: "'$BOX_IP_ADDRESS'"/' \
            Vagrantfile

        # If it worked, remove the backup file. Otherwise, replace it.
        if [[ "$?" == "0" ]]; then
            rm Vagrantfile.bak
        else
            echo "Couldn't modify Vagrantfile with $BOX_IP_ADDRESS."
            mv $BOX/Vagrantfile.bak $BOK/Vagrantfile
            exit 1
        fi

    fi

    # If a synced folder was specified, try to put it in the Vagrantfile.
    if [ $SYNCED_FOLDER ]; then

        # Escape backslashes so it can go in the sed regex.
        SAFE_SYNCED=${SYNCED_FOLDER/\//\\\/}

        # Use sed to replace the box identifier.
        sed -i.bak \
            's/_folder "..", "\([^"]*\)"/_folder "..", "'$SAFE_SYNCED'"/'
            Vagrantfile

        # If it worked, remove the backup file. Otherwise, replace it.
        if [[ "$?" == "0" ]]; then
            rm Vagrantfile.bak
        else
            echo "Couldn't modify Vagrantfile with $SYNCED_FOLDER."
            mv $BOX/Vagrantfile.bak $BOK/Vagrantfile
            exit 1
        fi

    fi

    # Now boot the VM.
    vagrant up

    # Back out of the vagrant folder and go back to the previous pwd.
    cd $ORIGINAL_PWD

}

# A function to shut the VM down.
function down {
    stop_if_not_init
    ORIGINAL_PWD=`pwd`
    cd $BOX
    vagrant halt
    cd $ORIGINAL_PWD
}

# A function to re-provision the VM.
function provision {
    stop_if_not_init
    ORIGINAL_PWD=`pwd`
    cd $BOX
    vagrant provision
    cd $ORIGINAL_PWD
}

# A function to destroy the VM.
function destroy {
    stop_if_not_init
    ORIGINAL_PWD=`pwd`
    cd $BOX
    vagrant destroy
    cd $ORIGINAL_PWD
}

# A function to SSH into the VM.
function ssh_into_vm {
    stop_if_not_init
    ORIGINAL_PWD=`pwd`
    cd $BOX
    vagrant ssh
    cd $ORIGINAL_PWD
}

# A function to pass all arguments to the VM.
# It will execute them all as a command.
function pass_arguments_to_vm {
    stop_if_not_init
    ORIGINAL_PWD=`pwd`
    cd $BOX
    CMD_STRING="${ARGUMENTS[@]}"
    vagrant ssh -c "${CMD_STRING}"
    cd $ORIGINAL_PWD
}

# If no arguments were provided, display the usage.
if [[ "$#" == "0" ]]; then
    echo "No arguments were provided."
    helphint
    exit 1
fi

# Step through the arguments, one by one.
# We'll add any we don't recognize to the $ARGUMENTS list.
ARGUMENTS=()
while (( "$#" )); do

    # What's the value of this argument ($1)?
    case $1 in

        # The help option.
        -h|--help)        usage
                          exit 1
                          ;;

        # An IP option, e.g. --ip 192.168.0.20
        --ip)             shift
                          BOX_IP_ADDRESS=$1
                          ;;

        # A --box option, e.g. --box ubuntu/vivid64
        --box)            shift
                          BOX_IDENTIFIER=$1
                          ;;

        # A --synced-folder option, e.g., --synced-folder /app
        --synced-folder)  shift
                          BOX_SYNCED_FOLDER=$1
                          ;;

        # Initialize the VM.
        init)             VAGRANT_COMMAND=init
                          ;;

        # Boot the VM.
        up)               VAGRANT_COMMAND=up
                          ;;

        # Shut down the VM.
        down)             VAGRANT_COMMAND=down
                          ;;

        # Provision the VM.
        provision)        VAGRANT_COMMAND=provision
                          ;;

        # Destroy the VM.
        destroy)          VAGRANT_COMMAND=destroy
                          ;;

        # SSH into the VM.
        ssh)              VAGRANT_COMMAND=ssh_into_vm
                          ;;

        # Anything else is an argument to pass directly to the VM.
        *)                ARGUMENTS=($ARGUMENTS $1)
                          ;;

    esac

    # Shift $1 to the next argument.
    shift

done

# If a vagrant command was specified, execute it.
if [ $VAGRANT_COMMAND ]; then
    $VAGRANT_COMMAND

# If we have a list of other arguments, let's pass them directly
# to the VM.
elif [ $ARGUMENTS ]; then
    pass_arguments_to_vm
fi
